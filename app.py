import nmap
import ipaddress
import re
import subprocess
import requests
from flask import Flask, render_template, request
import nvdlib
from dotenv import load_dotenv
import os

load_dotenv()

app = Flask(__name__)

# Function to get IP address of the current machine
def get_ip_address():
    result = subprocess.run(["ifconfig"], capture_output=True, text=True)
    if result.returncode == 0:
        output = result.stdout
        ip_pattern = r"inet (\d+\.\d+\.\d+\.\d+)"
        match = re.search(ip_pattern, output)
        if match:
            ip_address = match.group(1)
            return ip_address
        else:
            return "No IP address found"
    else:
        return "Error executing ifconfig"

# Function to scan local network and get available devices
def scan_local_network():
    nm = nmap.PortScanner()
    ip_address = get_ip_address()
    subnet = ip_address.split('/')[0] + "/24"
    network = ipaddress.ip_network(subnet, strict=False)
    nm.scan(hosts=str(network), arguments='-sn')
    hosts_list = [x for x in nm.all_hosts() if nm[x]['status']['state'] == 'up']
    return hosts_list

# Function to perform aggressive Nmap scan and get CVE data
def aggressive_scan_and_get_cve(target):
    nm = nmap.PortScanner()
    nm.scan(hosts=target, arguments='-A -sV -sC --max-parallelism 64')
    return nm

# Function to search NVD for vulnerabilities based on service and version
def search_nvd_vulnerabilities(service, version):
    query = f'{service} {version}'
    try:
        print(f"Searching NVD with query: {query}")
        result = nvdlib.cve.searchCVE(keywordSearch=query, key=os.getenv("NVD_API_KEY"))
        
        # Extract CVE information
        cve_list = []
        for cve in result:
            cve_entry = {
                'cve_id': cve.id,
                'description': cve.descriptions[0].value if cve.descriptions else 'Description not available'
            }
            cve_list.append(cve_entry)
            
        return cve_list
    except requests.exceptions.RequestException as e:
        print(f"Request Exception: {e}")
        return []

# Main route
@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        target = request.form['target']
        nm = aggressive_scan_and_get_cve(target)
        hosts_list = scan_local_network()

        # Extract service and version information from Nmap scan results
        service_versions = {}
        for host in nm.all_hosts():
            for proto in nm[host].all_protocols():
                lport = nm[host][proto].keys()
                for port in lport:
                    service = nm[host][proto][port]['name']
                    version = nm[host][proto][port]['version']
                    if service and version:
                        service_versions[service] = version

        # Search NVD for vulnerabilities for each service and version
        vulnerabilities = {}
        for service, version in service_versions.items():
            vulnerabilities[service] = search_nvd_vulnerabilities(service, version)

        # Prepare CVE data for display
        cve_data = []
        for host in nm.all_hosts():
            for proto in nm[host].all_protocols():
                lport = nm[host][proto].keys()
                for port in lport:
                    entry = nm[host][proto][port]
                    cve_entry = {
                        'host': host,
                        'protocol': proto,
                        'port': port,
                        'name': entry['name'],
                        'state': entry['state'],
                        'product': entry.get('product', ''),
                        'extrainfo': entry.get('extrainfo', ''),
                        'reason': entry.get('reason', ''),
                        'version': entry.get('version', ''),
                        'conf': entry.get('conf', ''),
                        'cpe': entry.get('cpe', ''),
                        'vulnerabilities': []
                    }
                    # Populate vulnerabilities
                    service = entry['name']
                    if service in vulnerabilities:
                        cve_entry['vulnerabilities'] = vulnerabilities[service]

                    cve_data.append(cve_entry)
        print(cve_data)
        return render_template('index.html', hosts=hosts_list, selected_target=target, cve_data=cve_data)
    else:
        hosts_list = scan_local_network()
        return render_template('index.html', hosts=hosts_list)

if __name__ == '__main__':
    app.run(debug=True)
